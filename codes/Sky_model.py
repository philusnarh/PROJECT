import os
import sys
import numpy as np
import scipy.stats as stats
import pylab as plt
import math as mt
from pyrap.tables import table
import os
import numpy as np
import pylab as plt
class Mset(object):

    def __init__(self, MS,WorkCol="DATA",point_sources=[]):
        t=table(MS,readonly=False)
        A1=t.getcol("ANTENNA1")
        A2=t.getcol("ANTENNA2")
        uvw=t.getcol("UVW")
        data=t.getcol(WorkCol)
        t1=table(MS +"ANTENNA")
        t2=table(MS +"SPECTRAL_WINDOW",readonly=False)
        wave=3e8/t2.getcol("REF_FREQUENCY")[0]
        na=np.max(A1)+1
        nbl=na*(na-1)/2+na
        ns=(len(A1))/nbl
        t.close()
        t1.close()
        t2.close()
        self.A1=A1
        self.A2=A2
        self.UVW=uvw
        self.DATA=data
        self.WorkCol=WorkCol
        self.wave = wave
        self.na = na
        self.nbl = nbl
        self.ns = ns
        self.MS=MS
        self.point_sources = point_sources
        self.std_point = 0.0001

    def save_ms(self):
        t=table(self.MS, readonly=False)
        t.putcol(self.WorkCol,self.DATA)
        t.close()


    def set_skyModel(self,point_sources):
        self.point_sources = point_sources

    def visibility(self):
        u=self.UVW[:,0]
        v=self.UVW[:,1]
        vis=np.zeros((self.DATA.shape[0],),dtype=self.DATA.dtype)
        for i in range(self.point_sources.shape[0]):
            vis =vis+ self.point_sources[i,0]*np.exp((-2*np.pi*1j*(u*self.point_sources[i,1]+v*self.point_sources[i,2]))/self.wave)
        self.DATA[:,0,3]=vis
        self.DATA[:,0,0]=vis
        return self.DATA.copy()
        
      


    
if __name__ == "__main__":
   
     m = Mset("VLAC-snapshot-21cm-hires.MS/")
     point_sources = np.array([#(1,0,0),
        	# (1,(-1*(30/60.)*np.pi)/180,(-1*0*np.pi)/180),
              #   (1,(-1*(60/60.)*np.pi)/180,(-1*0*np.pi)/180),
              #   (1,(-1*(90/60.)*np.pi)/180,(-1*0*np.pi)/180),
              #   (1,(-1*(120/60.)*np.pi)/180,(-1*0*np.pi)/180),
              #   (1,(-1*(150/60.)*np.pi)/180,(-1*0*np.pi)/180),
		
		
              #   (1,(1*(30/60.)*np.pi)/180,(-1*0*np.pi)/180),
              #   (1,(1*(60/60.)*np.pi)/180,(-1*0*np.pi)/180),
              #   (1,(1*(90/60.)*np.pi)/180,(-1*0*np.pi)/180),
              #   (1,(1*(120/60.)*np.pi)/180,(-1*0*np.pi)/180),
              #   (1,(1*(150/60.)*np.pi)/180,(-1*0*np.pi)/180),
                
                
              #   (1,(-1*(0.)*np.pi)/180,(-1*(30/60.)*np.pi)/180),
              #   (1,(-1*(0.)*np.pi)/180,(-1*(60/60.)*np.pi)/180),
              #   (1,(-1*(0.)*np.pi)/180,(-1*(90/60.)*np.pi)/180),
              #   (1,(-1*(0.)*np.pi)/180,(-1*(120/60.)*np.pi)/180),
              #   (1,(-1*(0.)*np.pi)/180,(-1*(150/60.)*np.pi)/180),
		
		
              #   (1,(1*(0.)*np.pi)/180,(1*(30/60.)*np.pi)/180),
              #   (1,(1*(0.)*np.pi)/180,(1*(60/60.)*np.pi)/180),
              #   (1,(1*(0.)*np.pi)/180,(1*(90/60.)*np.pi)/180),
              #   (1,(1*(0.)*np.pi)/180,(1*(120/60.)*np.pi)/180),
              #   (1,(1*(0.)*np.pi)/180,(1*(150/60.)*np.pi)/180),
                
                
              # # up left  
              #   (1,(-1*(30/60.)*np.pi)/180,(-1*(30/60.)*np.pi)/180),
              #   (1,(-1*(60/60.)*np.pi)/180,(-1*(30/60.)*np.pi)/180),
              #   (1,(-1*(90/60.)*np.pi)/180,(-1*(30/60.)*np.pi)/180),
              #   (1,(-1*(120/60.)*np.pi)/180,(-1*(30/60.)*np.pi)/180),
         	(1,(-1*(180/60.)*np.pi)/180,0)#(-1*(30/60.)*np.pi)/180)
		

                # (1,(-1*(30/60.)*np.pi)/180,(-1*(60/60.)*np.pi)/180),
        	# (1,(-1*(60/60.)*np.pi)/180,(-1*(60/60.)*np.pi)/180),
        	# (1,(-1*(90/60.)*np.pi)/180,(-1*(60/60.)*np.pi)/180),
        	# (1,(-1*(120/60.)*np.pi)/180,(-1*(60/60.)*np.pi)/180),
        	# (1,(-1*(150/60.)*np.pi)/180,(-1*(60/60.)*np.pi)/180),
		
                      
                # (1,(-1*(30/60.)*np.pi)/180,(-1*(90/60.)*np.pi)/180),
        	# (1,(-1*(60/60.)*np.pi)/180,(-1*(90/60.)*np.pi)/180),
        	# (1,(-1*(90/60.)*np.pi)/180,(-1*(90/60.)*np.pi)/180),
        	# (1,(-1*(120/60.)*np.pi)/180,(-1*(90/60.)*np.pi)/180),
        	# (1,(-1*(150/60.)*np.pi)/180,(-1*(90/60.)*np.pi)/180),
		

                # (1,(-1*(30/60.)*np.pi)/180,(-1*(120/60.)*np.pi)/180),
        	# (1,(-1*(60/60.)*np.pi)/180,(-1*(120/60.)*np.pi)/180),
        	# (1,(-1*(90/60.)*np.pi)/180,(-1*(120/60.)*np.pi)/180),
        	# (1,(-1*(120/60.)*np.pi)/180,(-1*(120/60.)*np.pi)/180),
        	# (1,(-1*(150/60.)*np.pi)/180,(-1*(120/60.)*np.pi)/180),
		
                 
                # (1,(-1*(30/60.)*np.pi)/180,(-1*(150/60.)*np.pi)/180),
        	# (1,(-1*(60/60.)*np.pi)/180,(-1*(150/60.)*np.pi)/180),
        	# (1,(-1*(90/60.)*np.pi)/180,(-1*(150/60.)*np.pi)/180),
        	# (1,(-1*(120/60.)*np.pi)/180,(-1*(150/60.)*np.pi)/180),
        	# (1,(-1*(150/60.)*np.pi)/180,(-1*(150/60.)*np.pi)/180),
                           
                # # down right
                # (1,(1*(30/60.)*np.pi)/180,(1*(30/60.)*np.pi)/180),
        	# (1,(1*(60/60.)*np.pi)/180,(1*(30/60.)*np.pi)/180),
        	# (1,(1*(90/60.)*np.pi)/180,(1*(30/60.)*np.pi)/180),
        	# (1,(1*(120/60.)*np.pi)/180,(1*(30/60.)*np.pi)/180),
        	# (1,(1*(150/60.)*np.pi)/180,(1*(30/60.)*np.pi)/180),
		

                # (1,(1*(30/60.)*np.pi)/180,(1*(60/60.)*np.pi)/180),
        	# (1,(1*(60/60.)*np.pi)/180,(1*(60/60.)*np.pi)/180),
        	# (1,(1*(90/60.)*np.pi)/180,(1*(60/60.)*np.pi)/180),
        	# (1,(1*(120/60.)*np.pi)/180,(1*(60/60.)*np.pi)/180),
        	# (1,(1*(150/60.)*np.pi)/180,(1*(60/60.)*np.pi)/180),
		
                      
                # (1,(1*(30/60.)*np.pi)/180,(1*(90/60.)*np.pi)/180),
        	# (1,(1*(60/60.)*np.pi)/180,(1*(90/60.)*np.pi)/180),
        	# (1,(1*(90/60.)*np.pi)/180,(1*(90/60.)*np.pi)/180),
        	# (1,(1*(120/60.)*np.pi)/180,(1*(90/60.)*np.pi)/180),
        	# (1,(1*(150/60.)*np.pi)/180,(1*(90/60.)*np.pi)/180),
		

                # (1,(1*(30/60.)*np.pi)/180,(1*(120/60.)*np.pi)/180),
        	# (1,(1*(60/60.)*np.pi)/180,(1*(120/60.)*np.pi)/180),
        	# (1,(1*(90/60.)*np.pi)/180,(1*(120/60.)*np.pi)/180),
        	# (1,(1*(120/60.)*np.pi)/180,(1*(120/60.)*np.pi)/180),
        	# (1,(1*(150/60.)*np.pi)/180,(1*(120/60.)*np.pi)/180),
		
                 
                # (1,(1*(30/60.)*np.pi)/180,(1*(150/60.)*np.pi)/180),
        	# (1,(1*(60/60.)*np.pi)/180,(1*(150/60.)*np.pi)/180),
        	# (1,(1*(90/60.)*np.pi)/180,(1*(150/60.)*np.pi)/180),
        	# (1,(1*(120/60.)*np.pi)/180,(1*(150/60.)*np.pi)/180),
        	# (1,(1*(150/60.)*np.pi)/180,(1*(150/60.)*np.pi)/180),
                
                # # up right
                # (1,(1*(30/60.)*np.pi)/180,(-1*(30/60.)*np.pi)/180),
        	# (1,(1*(60/60.)*np.pi)/180,(-1*(30/60.)*np.pi)/180),
        	# (1,(1*(90/60.)*np.pi)/180,(-1*(30/60.)*np.pi)/180),
        	# (1,(1*(120/60.)*np.pi)/180,(-1*(30/60.)*np.pi)/180),
        	# (1,(1*(150/60.)*np.pi)/180,(-1*(30/60.)*np.pi)/180),
		

                # (1,(1*(30/60.)*np.pi)/180,(-1*(60/60.)*np.pi)/180),
        	# (1,(1*(60/60.)*np.pi)/180,(-1*(60/60.)*np.pi)/180),
        	# (1,(1*(90/60.)*np.pi)/180,(-1*(60/60.)*np.pi)/180),
        	# (1,(1*(120/60.)*np.pi)/180,(-1*(60/60.)*np.pi)/180),
        	# (1,(1*(150/60.)*np.pi)/180,(-1*(60/60.)*np.pi)/180),
		
                      
                # (1,(1*(30/60.)*np.pi)/180,(-1*(90/60.)*np.pi)/180),
        	# (1,(1*(60/60.)*np.pi)/180,(-1*(90/60.)*np.pi)/180),
        	# (1,(1*(90/60.)*np.pi)/180,(-1*(90/60.)*np.pi)/180),
        	# (1,(1*(120/60.)*np.pi)/180,(-1*(90/60.)*np.pi)/180),
        	# (1,(1*(150/60.)*np.pi)/180,(-1*(90/60.)*np.pi)/180),
		

                # (1,(1*(30/60.)*np.pi)/180,(-1*(120/60.)*np.pi)/180),
        	# (1,(1*(60/60.)*np.pi)/180,(-1*(120/60.)*np.pi)/180),
        	# (1,(1*(90/60.)*np.pi)/180,(-1*(120/60.)*np.pi)/180),
        	# (1,(1*(120/60.)*np.pi)/180,(-1*(120/60.)*np.pi)/180),
        	# (1,(1*(150/60.)*np.pi)/180,(-1*(120/60.)*np.pi)/180),
		
                 
                # (1,(1*(30/60.)*np.pi)/180,(-1*(150/60.)*np.pi)/180),
        	# (1,(1*(60/60.)*np.pi)/180,(-1*(150/60.)*np.pi)/180),
        	# (1,(1*(90/60.)*np.pi)/180,(-1*(150/60.)*np.pi)/180),
        	# (1,(1*(120/60.)*np.pi)/180,(-1*(150/60.)*np.pi)/180),
        	# (1,(1*(150/60.)*np.pi)/180,(-1*(150/60.)*np.pi)/180),

                # #down left
                # (1,(-1*(30/60.)*np.pi)/180,(1*(30/60.)*np.pi)/180),
        	# (1,(-1*(60/60.)*np.pi)/180,(1*(30/60.)*np.pi)/180),
        	# (1,(-1*(90/60.)*np.pi)/180,(1*(30/60.)*np.pi)/180),
        	# (1,(-1*(120/60.)*np.pi)/180,(1*(30/60.)*np.pi)/180),
        	# (1,(-1*(150/60.)*np.pi)/180,(1*(30/60.)*np.pi)/180),
		

                # (1,(-1*(30/60.)*np.pi)/180,(1*(60/60.)*np.pi)/180),
        	# (1,(-1*(60/60.)*np.pi)/180,(1*(60/60.)*np.pi)/180),
        	# (1,(-1*(90/60.)*np.pi)/180,(1*(60/60.)*np.pi)/180),
        	# (1,(-1*(120/60.)*np.pi)/180,(1*(60/60.)*np.pi)/180),
        	# (1,(-1*(150/60.)*np.pi)/180,(1*(60/60.)*np.pi)/180),
		
                      
                # (1,(-1*(30/60.)*np.pi)/180,(1*(90/60.)*np.pi)/180),
        	# (1,(-1*(60/60.)*np.pi)/180,(1*(90/60.)*np.pi)/180),
        	# (1,(-1*(90/60.)*np.pi)/180,(1*(90/60.)*np.pi)/180),
        	# (1,(-1*(120/60.)*np.pi)/180,(1*(90/60.)*np.pi)/180),
        	# (1,(-1*(150/60.)*np.pi)/180,(1*(90/60.)*np.pi)/180),
		

                # (1,(-1*(30/60.)*np.pi)/180,(1*(120/60.)*np.pi)/180),
        	# (1,(-1*(60/60.)*np.pi)/180,(1*(120/60.)*np.pi)/180),
        	# (1,(-1*(90/60.)*np.pi)/180,(1*(120/60.)*np.pi)/180),
        	# (1,(-1*(120/60.)*np.pi)/180,(1*(120/60.)*np.pi)/180),
        	# (1,(-1*(150/60.)*np.pi)/180,(1*(120/60.)*np.pi)/180),
		
                 
                # (1,(-1*(30/60.)*np.pi)/180,(1*(150/60.)*np.pi)/180),
        	# (1,(-1*(60/60.)*np.pi)/180,(1*(150/60.)*np.pi)/180),
        	# (1,(-1*(90/60.)*np.pi)/180,(1*(150/60.)*np.pi)/180),
        	# (1,(-1*(120/60.)*np.pi)/180,(1*(150/60.)*np.pi)/180),
        	# (1,(-1*(150/60.)*np.pi)/180,(1*(150/60.)*np.pi)/180),
              
		
                

                
                
         	]) 
     m.set_skyModel(point_sources)
     m.visibility()
     m.save_ms()
     simulate = "meqtree-pipeliner.py -c tdlconf.profiles \[turbo-sim:2\] turbo-sim.py =_tdl_job_1_simulate_MS"

    
    #strp=""" " """
    #strsel=((strp+"sumsqr(UVW[:2])<16.e6 "+strp)).replace(" ","")
     lwimager = "lwimager ms=VLAC-snapshot-21cm-hires.MS niter=0 fits=image1.fits data=DATA cellsize=20arcsec npix=1024"# select=%s"%(strsel)
     os.system("rm image1.fits")  
     os.system(simulate)
     os.system(lwimager)
     os.system("tigger image1.fits")
